/*
 * Copyright 2019, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.gestureunlock.ui.editfile

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.EditorInfo
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import com.example.gestureunlock.R
import com.example.gestureunlock.data.FileDatabase
import com.example.gestureunlock.databinding.FragmentEditFileBinding

/**
 * Fragment that displays a list of clickable icons,
 * each representing a sleep quality rating.
 * Once the user taps an icon, the quality is set in the current sleepNight
 * and the database is updated.
 */
class EditFileFragment : Fragment() {

    /**
     * Called when the Fragment is ready to display content to the screen.
     *
     * This function uses DataBindingUtil to inflate R.layout.fragment_sleep_quality.
     *
     * It is also responsible for passing the [SleepQualityViewModel] to the
     * [FragmentSleepQualityBinding] generated by DataBinding. This will allow DataBinding
     * to use the [LiveData] on our ViewModel.
     */
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {

        // Get a reference to the binding object and inflate the fragment views.
        val binding: FragmentEditFileBinding = DataBindingUtil.inflate(
                inflater, R.layout.fragment_edit_file, container, false)

        val application = requireNotNull(this.activity).application
        val arguments = EditFileFragmentArgs.fromBundle(arguments)

        // Create an instance of the ViewModel Factory.
        val dataSource = FileDatabase.getInstance(application).fileDatabaseDao
        val viewModelFactory = EditFileViewModelFactory(arguments.fileKey, dataSource)

        // Get a reference to the ViewModel associated with this fragment.
        val editFileViewModel =
                ViewModelProvider(
                        this, viewModelFactory).get(EditFileViewModel::class.java)

        binding.editFileViewModel = editFileViewModel

        editFileViewModel.getFile().observe(viewLifecycleOwner, Observer {
            it?.let {
                binding.editFileInput.setText(it.content)
                binding.fileTitle.text = it.fileName
            }
        })

        binding.editFileInput.setOnEditorActionListener{ v, actionId, event ->
            return@setOnEditorActionListener when (actionId) {
                EditorInfo.IME_ACTION_DONE -> {
                    editFileViewModel.onEditFile(v.text.toString())
                    Toast.makeText(context, "Saved File", Toast.LENGTH_SHORT).show()
                    false
                }
                else -> false
            }
        }
        return binding.root
    }
}
